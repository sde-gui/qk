/*
 *   medit-app.c
 *
 *   Copyright (C) 2004-2006 by Yevgen Muntyan <muntyan@math.tamu.edu>
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   See COPYING file that comes with this distribution.
 */

#define WANT_MOO_APP_CMD_STRINGS
#include "medit-ui.h"
#include <mooapp/mooapp.h>
#include <mooapp/mooappinput.h>
#include <mooutils/mooutils-fs.h>
#include <mooutils/mooutils-misc.h>
#include <mooutils/moostock.h>
#include <moo-version.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#define DEFAULT_NEW_INSTANCE 0


int _medit_parse_options (const char *const program_name,
                          const int         argc,
                          char **const      argv);

/********************************************************
 * command line parsing code generated by Opag
 * http://www.zero-based.org/software/opag/
 */
%%
#if DEFAULT_NEW_INSTANCE
u  unique       "Use running instance of application"
#endif
#if !DEFAULT_NEW_INSTANCE
n  new-app      "Run new instance of application"
#endif
l  log          "[=FILE] Show debug output or write it to FILE" optarg
   version      "Display version information and exit"          return
h  help         "Display this help text and exit"               return
%%
/* end of generated code
 ********************************************************/


static void
usage (void)
{
    g_print ("Usage: %s [OPTIONS] [FILES]\n", g_get_prgname ());
    g_print ("Options:\n");

#if DEFAULT_NEW_INSTANCE
    g_print ("%s", STR_HELP_UNIQUE);
#else
    g_print ("%s", STR_HELP_NEW_APP);
#endif

    g_print ("%s", STR_HELP_LOG);
    g_print ("%s", STR_HELP_VERSION);
    g_print ("%s", STR_HELP_HELP);
}

static void
version (void)
{
    g_print ("medit %s\n", MOO_VERSION);
}


static gboolean
send_files (MooApp *app,
            char  **files)
{
    char **p;
    gboolean result;
    GString *msg;

    msg = g_string_new (NULL);

    if (!files || !*files)
        g_string_append_len (msg, CMD_PRESENT, strlen (CMD_PRESENT) + 1);

    for (p = files; p && *p; ++p)
    {
        char *freeme = NULL;
        const char *basename, *filename;

        basename = *p;

        if (g_path_is_absolute (basename))
        {
            filename = basename;
        }
        else
        {
            char *dir = g_get_current_dir ();
            freeme = g_build_filename (dir, basename, NULL);
            filename = freeme;
            g_free (dir);
        }

        g_string_append_len (msg, CMD_OPEN_FILE, strlen (CMD_OPEN_FILE));
        g_string_append_len (msg, filename, strlen (filename) + 1);

        g_free (freeme);
    }

    result = moo_app_send_msg (app, msg->str, msg->len);

    g_string_free (msg, TRUE);
    return result;
}


int main (int argc, char *argv[])
{
    MooApp *app;
    int opt_remain;
    MooEditor *editor;
    char **files;
    gpointer window;
    int retval;
    gboolean new_instance;

    gtk_init (&argc, &argv);
//     gdk_window_set_debug_updates (TRUE);

    opt_remain = _medit_parse_options (g_get_prgname (), argc, argv);

    if (opt_remain < 0)
    {
        usage ();
        return 1;
    }

    if (_medit_opt_help)
    {
        usage ();
        return 0;
    }
    else if (_medit_opt_version)
    {
        version ();
        return 0;
    }

    if (_medit_opt_log)
    {
        if (_medit_arg_log)
            moo_set_log_func_file (_medit_arg_log);
        else
            moo_set_log_func_window (TRUE);
    }

#if DEFAULT_NEW_INSTANCE
    new_instance = _medit_opt_unique == 0;
#else
    new_instance = _medit_opt_new_app != 0;
#endif

    files = moo_filenames_from_locale (argv + opt_remain);

    app = g_object_new (MOO_TYPE_APP,
                        "argv", argv,
                        "short-name", "medit",
                        "full-name", "medit",
                        "description", "medit is a text editor",
                        "website", "http://mooedit.sourceforge.net/",
                        "website-label", "http://mooedit.sourceforge.net/",
                        "default-ui", MEDIT_UI,
                        "logo", MOO_STOCK_MEDIT,
                        NULL);

    if ((!new_instance && send_files (app, files)) ||
         !moo_app_init (app))
    {
        gdk_notify_startup_complete ();
        g_strfreev (files);
        g_object_unref (app);
        return 0;
    }

    editor = moo_app_get_editor (app);
    window = moo_editor_new_window (editor);

    if (files && *files)
    {
        char **p;

        for (p = files; p && *p; ++p)
            moo_editor_new_file (editor, window, NULL, *p, NULL);
    }

    g_strfreev (files);

    g_signal_connect_swapped (editor, "all-windows-closed",
                              G_CALLBACK (moo_app_quit), app);

    retval = moo_app_run (app);

    g_object_unref (app);
    return retval;
}
