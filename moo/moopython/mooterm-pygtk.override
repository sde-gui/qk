/* kate: lang C; indent-width 4; space-indent on; strip on; */
%%
headers
#include <Python.h>
#define NO_IMPORT_PYGOBJECT
#include "pygobject.h"
#include "pygtk/pygtk.h"
#include "mooterm/mooterm.h"
#include "mooterm/mootermwindow.h"
#include "mooterm/mooterm-text.h"
#include "mooterm/mootermbuffer.h"
#include "mooterm/mooterm-prefs.h"
#include "mooutils/mooutils-python.h"
#include "moopython/moo-pygtk.h"


static GdkAtom
atom_from_pyobject(PyObject *object)
{
    if (object == NULL)
        return NULL;
    if (PyString_Check(object))
        return gdk_atom_intern(PyString_AsString(object), FALSE);
    if (PyGdkAtom_Check(object))
        return PyGdkAtom_Get(object);
    PyErr_SetString(PyExc_TypeError, "unable to convert argument to GdkAtom");
    return NULL;
}


%%
modulename _moo_term
%%
import gtk.Widget as PyGtkWidget_Type
import gtk.Adjustment as PyGtkAdjustment_Type
import gobject.GObject as PyGObject_Type
import _moo_utils.Window as PyMooWindow_Type
%%
ignore-glob
  *_get_type
%%
override moo_term_new kwargs
static int
_wrap_moo_term_new (PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords (args, kwargs, ":Term", kwlist))
        return -1;

    self->obj = g_object_new (MOO_TYPE_TERM, NULL);
    pygobject_register_wrapper ((PyObject*)self);

    return 0;
}
%%
override moo_term_fork_command_line kwargs
static PyObject *
_wrap_moo_term_fork_command_line (PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = {(char*)"cmd", (char*)"working_dir", (char*)"env", NULL};
    const char *cmd = NULL;
    const char *working_dir = NULL;
    char **env = NULL;
    GError *error = NULL;

    if (!PyArg_ParseTupleAndKeywords (args, kwargs, (char*) "s|sO&:Term.fork_command_line",
                                      kwlist, &cmd, &working_dir,
                                      moo_pyobject_to_strv, &env))
        return NULL;

    if (working_dir)
        g_print ("working_dir: %s\n", working_dir);

    moo_term_fork_command_line (MOO_TERM (self->obj), cmd,
                                working_dir, env, &error);
    g_strfreev (env);

    if (pyg_error_check (&error))
        return NULL;

    return_None;
}
%%
override moo_term_copy_clipboard kwargs
static PyObject *
_wrap_moo_term_copy_clipboard (PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*) "selection", NULL };
    PyObject *py_selection = NULL;
    GdkAtom selection;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char*) "O:MooTerm.copy_clipboard", kwlist, &py_selection))
        return NULL;
    selection = atom_from_pyobject(py_selection);
    if (PyErr_Occurred())
        return NULL;
    moo_term_copy_clipboard(MOO_TERM(self->obj), selection);
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override moo_term_paste_clipboard kwargs
static PyObject *
_wrap_moo_term_paste_clipboard(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { (char*) "selection", NULL };
    PyObject *py_selection = NULL;
    GdkAtom selection;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char*) "O:MooTerm.paste_clipboard", kwlist, &py_selection))
        return NULL;
    selection = atom_from_pyobject(py_selection);
    if (PyErr_Occurred())
        return NULL;
    moo_term_paste_clipboard(MOO_TERM(self->obj), selection);
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override moo_term_get_iter_at_line varargs
static PyObject *
_wrap_moo_term_get_iter_at_line (PyGObject *self, PyObject *args)
{
    int line;
    MooTermIter iter;

    if (!PyArg_ParseTuple (args, (char*) "i:MooTerm.get_iter_at_line", &line))
        return NULL;

    if (moo_term_get_iter_at_line (MOO_TERM(self->obj), &iter, line))
        return pyg_boxed_new (MOO_TYPE_TERM_ITER, &iter, TRUE, TRUE);
    else
        return_None;
}
%%
override moo_term_get_iter_at_line_offset varargs
static PyObject *
_wrap_moo_term_get_iter_at_line_offset (PyGObject *self, PyObject *args)
{
    int line, offset;
    MooTermIter iter;

    if (!PyArg_ParseTuple (args, (char*) "ii:MooTerm.get_iter_at_line_offset", &line, &offset))
        return NULL;

    if (moo_term_get_iter_at_line_offset (MOO_TERM(self->obj), &iter, line, offset))
        return pyg_boxed_new (MOO_TYPE_TERM_ITER, &iter, TRUE, TRUE);
    else
        return_None;
}
%%
override moo_term_get_iter_at_cursor noargs
static PyObject *
_wrap_moo_term_get_iter_at_cursor (PyGObject *self)
{
    MooTermIter iter;

    moo_term_get_iter_at_cursor (MOO_TERM(self->obj), &iter);
    return pyg_boxed_new (MOO_TYPE_TERM_ITER, &iter, TRUE, TRUE);
}
%%
override moo_term_get_iter_at_location varargs
static PyObject *
_wrap_moo_term_get_iter_at_location (PyGObject *self, PyObject *args)
{
    int x, y;
    MooTermIter iter;

    if (!PyArg_ParseTuple (args, (char*) "ii:MooTerm.get_iter_at_location", &x, &y))
        return NULL;

    moo_term_get_iter_at_location (MOO_TERM(self->obj), &iter, x, y);
    return pyg_boxed_new (MOO_TYPE_TERM_ITER, &iter, TRUE, TRUE);
}
%%
override moo_term_get_iter_at_pos varargs
static PyObject *
_wrap_moo_term_get_iter_at_pos (PyGObject *self, PyObject *args)
{
    int x, y;
    MooTermIter iter;

    if (!PyArg_ParseTuple (args, (char*) "ii:MooTerm.get_iter_at_pos", &x, &y))
        return NULL;

    moo_term_get_iter_at_pos (MOO_TERM(self->obj), &iter, x, y);
    return pyg_boxed_new (MOO_TYPE_TERM_ITER, &iter, TRUE, TRUE);
}
%%
override moo_term_iter_copy noargs
static PyObject *
_wrap_moo_term_iter_copy (PyObject *self)
{
    MooTermIter *ret;

    ret = moo_term_iter_copy(pyg_boxed_get(self, MooTermIter));

    return pyg_boxed_new (MOO_TYPE_TERM_ITER, ret, FALSE, TRUE);
}
%%
override moo_term_window_to_buffer_coords varargs
static PyObject *
_wrap_moo_term_window_to_buffer_coords (PyGObject *self, PyObject *args)
{
    int x, y;
    int buf_x, buf_y;

    if (!PyArg_ParseTuple (args, (char*) "ii:MooTerm.window_to_buffer_coords", &x, &y))
        return NULL;

    moo_term_window_to_buffer_coords (MOO_TERM(self->obj), x, y, &buf_x, &buf_y);
    return Py_BuildValue((char*) "(ii)", buf_x, buf_y);
}
%%
override moo_term_feed varargs
static PyObject *
_wrap_moo_term_feed (PyGObject *self, PyObject *args)
{
    char *string;
    int len;

    if (!PyArg_ParseTuple (args, (char*) "s#:MooTerm.feed", &string, &len))
        return NULL;

    moo_term_feed (MOO_TERM (self->obj), string, len);
    return_None;
}
%%
override moo_term_feed_child varargs
static PyObject *
_wrap_moo_term_feed_child (PyGObject *self, PyObject *args)
{
    char *string;
    int len;

    if (!PyArg_ParseTuple (args, (char*) "s#:MooTerm.feed_child", &string, &len))
        return NULL;

    moo_term_feed_child (MOO_TERM (self->obj), string, len);
    return_None;
}
%%
override moo_term_get_screen_size noargs
static PyObject *
_wrap_moo_term_get_screen_size (PyGObject *self)
{
    guint columns, rows;
    moo_term_get_screen_size (MOO_TERM (self->obj), &columns, &rows);
    return Py_BuildValue ((char*) "(ii)", columns, rows);
}
