<?xml version="1.0" encoding="UTF-8"?>
<!--

 Author: Gustavo Giráldez <gustavo.giraldez@gmx.net>
 Copyright (C) 2003 Gustavo Giráldez <gustavo.giraldez@gmx.net>
 Copyright (C) 2003 Michael Terry <mike@mterry.name>
 Copyright (C) 2004 Benoît Dejean <tazforever@dlfp.org>

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Library General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Library General Public License for more details.

 You should have received a copy of the GNU Library General Public
 License along with this library; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA 02111-1307, USA.

-->
<language id="ada" _name="Ada" version="2.0" _section="Sources">
  <metadata>
    <property name="mimetypes">text/x-ada;text/x-adasrc</property>
    <property name="globs">*.adb;*.ads</property>
  </metadata>

  <styles>
    <style id="comment" _name="Comment" map-to="def:comment"/>
    <style id="string" _name="String" map-to="def:string"/>
    <style id="keyword" _name="Keyword" map-to="def:keyword"/>
    <style id="decimal" _name="Decimal" map-to="def:decimal"/>
    <style id="boolean" _name="Boolean" map-to="def:string"/>
    <style id="data-type" _name="Data Type" map-to="def:data-type"/>
    <style id="preprocessor" _name="Preprocessor" map-to="def:preprocessor"/>
    <style id="base-n-number" _name="Arbitrary base number" map-to="def:base-n-integer"/>
    <style id="real" _name="Real number" map-to="def:floating-point"/>
    <style id="escape" _name="Character Escape" map-to="def:escape"/>
    <style id="ident" _name="Ada Identifier"/>
  </styles>

  <default-regex-options case-sensitive="false"/>

  <definitions>
    <context id="line-comment" style-ref="comment" end-at-line-end="true">
      <start>--</start>
    </context>
    <context id="string" style-ref="string" end-at-line-end="true">
      <start>"</start>
      <end>"</end>
      <!-- no escapes possible except for "" = literal " -->
      <include>
         <context id="string-esc" style-ref="escape" extend-parent="true">
            <match>""</match>
         </context>
       </include>
    </context>
    <context id="character-constant" style-ref="string">
      <match>'.'</match>
    </context>
    <context id="preprocessor-keyword" style-ref="preprocessor">
      <keyword>package</keyword>
      <keyword>pragma</keyword>
      <keyword>use</keyword>
      <keyword>with</keyword>
    </context>
    <context id="function" style-ref="keyword">
      <keyword>function</keyword>
      <keyword>procedure</keyword>
      <keyword>return</keyword>
    </context>
    <context id="keyword" style-ref="keyword">
      <keyword>abort</keyword>
      <keyword>abs</keyword>
      <keyword>abstract</keyword>
      <keyword>accept</keyword>
      <keyword>access</keyword>
      <keyword>aliased</keyword>
      <keyword>all</keyword>
      <keyword>and</keyword>
      <keyword>array</keyword>
      <keyword>at</keyword>
      <keyword>begin</keyword>
      <keyword>body</keyword>
      <keyword>case</keyword>
      <keyword>constant</keyword>
      <keyword>declare</keyword>
      <keyword>delay</keyword>
      <keyword>delta</keyword>
      <keyword>digits</keyword>
      <keyword>do</keyword>
      <keyword>else</keyword>
      <keyword>elsif</keyword>
      <keyword>end</keyword>
      <keyword>entry</keyword>
      <keyword>exception</keyword>
      <keyword>exit</keyword>
      <keyword>for</keyword>
      <keyword>generic</keyword>
      <keyword>goto</keyword>
      <keyword>if</keyword>
      <keyword>in</keyword>
      <keyword>is</keyword>
      <keyword>limited</keyword>
      <keyword>loop</keyword>
      <keyword>mod</keyword>
      <keyword>new</keyword>
      <keyword>not</keyword>
      <keyword>null</keyword>
      <keyword>of</keyword>
      <keyword>or</keyword>
      <keyword>others</keyword>
      <keyword>out</keyword>
      <keyword>private</keyword>
      <keyword>protected</keyword>
      <keyword>raise</keyword>
      <keyword>range</keyword>
      <keyword>record</keyword>
      <keyword>rem</keyword>
      <keyword>renames</keyword>
      <keyword>requeue</keyword>
      <keyword>reverse</keyword>
      <keyword>select</keyword>
      <keyword>separate</keyword>
      <keyword>subtype</keyword>
      <keyword>tagged</keyword>
      <keyword>task</keyword>
      <keyword>terminate</keyword>
      <keyword>then</keyword>
      <keyword>type</keyword>
      <keyword>until</keyword>
      <keyword>when</keyword>
      <keyword>while</keyword>
      <keyword>xor</keyword>
    </context>
    <context id="type" style-ref="data-type">
      <keyword>boolean</keyword>
      <keyword>character</keyword>
      <keyword>count</keyword>
      <keyword>duration</keyword>
      <keyword>float</keyword>
      <keyword>integer</keyword>
      <keyword>long_float</keyword>
      <keyword>long_integer</keyword>
      <keyword>priority</keyword>
      <keyword>short_float</keyword>
      <keyword>short_integer</keyword>
      <keyword>string</keyword>
    </context>
    <define-regex id="hexnum">[0-9a-f][0-9a-f_]*</define-regex>
    <define-regex id="exponent">[Ee][+-]?[0-9][0-9_]*</define-regex>
    <context id="based-numeral" style-ref="base-n-number">
      <match extended="true">
        (?&lt;![\w\.])
        [0-9][0-9_]*\#\%{hexnum}(\.\%{hexnum})?\#\%{exponent}?
        (?![\w\.])
      </match>
    </context>
    <context id="real" style-ref="real">
      <match extended="true">
        (?&lt;![\w\.])
        [0-9][0-9_]*\.[0-9][0-9_]*\%{exponent}?
        (?![\w\.])
      </match>
    </context>
    <context id="number" style-ref="decimal">
      <match extended="true">
        (?&lt;![\w\.])
        [0-9][0-9_]*(E[+]?[0-9][0-9_]*)?
        (?![\w\.])
      </match>
    </context>
    <context id="true-and-false" style-ref="boolean">
      <keyword>true</keyword>
      <keyword>false</keyword>
    </context>
    <context id="ada">
      <include>
        <context ref="line-comment"/>
        <context ref="string"/>
        <context ref="character-constant"/>
        <context ref="preprocessor-keyword"/>
        <context ref="function"/>
        <context ref="keyword"/>
        <context ref="type"/>
        <context ref="based-numeral"/>
        <context ref="real"/>
        <context ref="number"/>
        <context ref="true-and-false"/>
      </include>
    </context>
  </definitions>
</language>
