# -%- strip: false; indent-width: 2 -%-
[tool]
id = SortLines
name = Sort Lines
type = lua
options = need-doc
  lines = doc.get_selected_lines()
  if lines then
    table.sort(lines)
    doc.replace_selected_lines(lines)
  end
  
  -- lines = doc.get_selected_lines()
  -- uniq_lines = {}
  -- for _, line in pairs(lines) do
  --   if (#line ~= 0) then
  --     uniq_lines[line] = true
  --   end
  -- end
  -- lines = {}
  -- for line, _ in uniq_lines do
  --   table.insert(lines, line)
  -- end
  -- table.sort(lines)
  -- -- table.foreach(lines, print)
  -- doc.replace_selected_lines(lines)
  

[tool]
input = lines
name = Sort | Uniq
id = SortLinesUniq
type = exe
output = insert
options = need-doc
  sort | uniq

[tool]
id=Yacc
langs=yacc
type=exe
name=Bison
filter=bison
options=need-save
output=pane
  bison $DOC

[tool]
id=LaTeX
file-filter=*.tex
type=exe
name=LaTeX
filter=latex
options=need-save
output=pane
accel=<shift><ctrl>L
  [ -f medit-env.sh ] && . medit-env.sh
  doc="${LATEX_MASTER:-$DOC}"
  latex --src-specials "$doc"
  

[tool]
id=Make_PDF
file-filter=*.tex
type=exe
name=Make PDF
filter=latex
options=need-save
output=pane
  [ -f medit-env.sh ] && . medit-env.sh
  doc="${LATEX_MASTER:-$DOC}"
  doc_base=`basename "$doc" .tex`
  latex --src-specials "$doc" && \
  dvips "$doc_base.dvi" && \
  ps2pdf "$doc_base.ps"
  

[tool]
id=Bibtex
file-filter=*.tex
type=exe
name=Bibtex
options=need-doc
output=pane
accel=<shift><ctrl>B
  [ -f medit-env.sh ] && . medit-env.sh
  doc="${LATEX_MASTER:-$DOC}"
  doc_base=`basename "$doc" .tex`
  bibtex "$doc_base"
  

[tool]
id=PdfLaTeX
file-filter=*.tex
type=exe
name=PdfLaTeX
filter=latex
options=need-save
output=pane
  [ -f medit-env.sh ] && . medit-env.sh
  doc="${LATEX_MASTER:-$DOC}"
  pdflatex "$doc"
  

[tool]
id=View_DVI
file-filter=*.tex
type=exe
name=View DVI
options=need-doc
output=async
accel=<shift><ctrl>V
  [ -f medit-env.sh ] && . medit-env.sh
  doc="${LATEX_MASTER:-$DOC}"
  doc_base=`basename "$doc" .tex`
  if (which kdvi > /dev/null); then
    kdvi --unique "$doc_base.dvi" && \
    dcop `dcopfind -a 'kviewshell-*'` kdvi-mainwindow#1 hide && \
    dcop `dcopfind -a 'kviewshell-*'` kdvi-mainwindow#1 show
  else
    xdg-open "$doc_base.dvi"
  fi
  

[tool]
id=View_PDF
file-filter=*.tex
type=exe
name=View PDF
options=need-doc
output=async
  [ -f medit-env.sh ] && . medit-env.sh
  doc="${LATEX_MASTER:-$DOC}"
  doc_base=`basename "$doc" .tex`
  if (which kpdf > /dev/null); then
    kpdf=`dcopfind -a 'kpdf-*'`
    if [ -z "$kpdf" ]; then
      kpdf "$doc_base.pdf"
      kpdf=`dcopfind -a 'kpdf-*'`
    else
      dcop "$kpdf" kpdf openDocument "$doc_base.pdf"
    fi
    dcop "$kpdf" kpdf-mainwindow#1 hide
    dcop "$kpdf" kpdf-mainwindow#1 show
  else
    xdg-open "$doc_base.pdf"
  fi
  

[tool]
id=Math
file-filter=*.tex
type=lua
name=Math
options=need-doc
accel=<alt>M
  if doc.has_selection() then
    doc.replace_selected_text('$' .. doc.get_selected_text() .. '$')
  else
    pos = doc.get_cursor_pos()
    doc.insert_text('$ $')
    doc.set_selection(pos + 1, pos + 2)
  end
  

[tool]
id=InsertDateAndTime
type=python
name=Insert Date and Time
options=need-doc
  # insert_date_and_time.py is installed in
  # $prefix/lib/moo/plugins/lib
  from insert_date_and_time import get_format
  import time
  
  fmt = get_format(window)
  if fmt is not None:
      buffer.insert_at_cursor(time.strftime(fmt))
  
