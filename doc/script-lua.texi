@menu
* medit.App (Lua):: 
* medit.Command (Lua):: 
* medit.CommandContext (Lua):: 
* medit.Edit (Lua):: Document object.
* medit.EditOpenInfo (Lua):: 
* medit.EditReloadInfo (Lua):: 
* medit.EditSaveInfo (Lua):: 
* medit.EditWindow (Lua):: 
* medit.Editor (Lua):: 
* medit.Pane (Lua):: 
* medit.TextView (Lua):: 
* medit.UiXml (Lua):: 
* medit.CommandData (Lua):: 
* medit.PaneLabel (Lua):: 
* medit.PaneParams (Lua):: 
* medit.UiNode (Lua):: 
* Functions (Lua):: Functions.
@end menu

@node medit.App (Lua)
@subsection class medit.App
@helpsection{SCRIPT_LUA_MOO_APP}

@table @method

@item get_editor()

@end table

@node medit.Command (Lua)
@subsection class medit.Command
@helpsection{SCRIPT_LUA_MOO_COMMAND}

@table @method

@item get_options()

@item set_options(options)

@end table

@node medit.CommandContext (Lua)
@subsection class medit.CommandContext
@helpsection{SCRIPT_LUA_MOO_COMMAND_CONTEXT}

@table @method

@item get_doc()

@item get_window()

@end table

@node medit.Edit (Lua)
@subsection class medit.Edit
@helpsection{SCRIPT_LUA_MOO_EDIT}

Object which represents a document. It has methods for file operations and manipulating document text.
@table @method

@item append_text(text)

@item begin_non_undoable_action()

@item can_redo()

@item can_undo()

@item clear()

@item close(ask_confirm=true)

@item copy()

@item cut()

@item delete_selected_lines()

@item delete_selected_text()

@item delete_text(start, end)

@item end_non_undoable_action()

@item get_buffer()

@item get_char_at_pos(pos)

@item get_char_count()

@item get_clean()

@item get_cursor_pos()

@item get_display_basename()

@item get_display_name()

@item get_editor()

@item get_encoding()

@item get_end_pos()

@item get_file()

@item get_filename()

@item get_lang_id()

@item get_line_at_pos(pos)

@item get_line_count()

@item get_line_end_type()

@item get_pos_at_line(line)

@item get_pos_at_line_end(line)

@item get_selected_lines()
Returns selected lines as a list of strings, one string for each line, line terminator characters not included. If nothing is selected, then line at cursor is returned. 

@item get_selected_text()
returns selected text.

@item get_selection_end_pos()

@item get_selection_start_pos()

@item get_start_pos()

@item get_status()

@item get_text(start=nil, end=nil)

@item get_uri()

@item get_view()

@item get_window()

@item has_selection()

@item insert_text(text, where=nil)
Insert text at position @param{where} or at cursor position if @param{where} is @code{nil}.

@item is_empty()
This function returns whether the document is "empty", i.e. is not modified, is untitled, and contains no text.

@item is_modified()

@item is_untitled()

@item paste()

@item redo()

@item reload(info=nil)
Reload document from disk 

@item replace_selected_lines(replacement)
replace selected lines with @param{replacement}. Similar to @method{replace_selected_text()}, but selection is extended to include whole lines. If nothing is selected, then line at cursor is replaced.

@item replace_selected_text(replacement)
replace selected text with @param{replacement}. If nothing is selected, then @param{replacement} is inserted at cursor.

@item replace_text(start, end, text)

@item save()

@item save_as(info)

@item save_copy(info)

@item select_all()

@item select_lines(start, end=-1)

@item select_lines_at_pos(start, end=nil)
Select lines which span the range from @param{start} to @param{end} (including @param{end} position). If @param{end} is @code{nil}, then it selects single line which contains position @param{start}.

@item select_text(start, end)

@item set_clean(clean)

@item set_cursor_pos(pos)

@item set_encoding(encoding)

@item set_line_end_type(le)

@item set_modified(modified)

@item set_selection(start, end)

@item undo()

@end table

@node medit.EditOpenInfo (Lua)
@subsection class medit.EditOpenInfo
@helpsection{SCRIPT_LUA_MOO_EDIT_OPEN_INFO}

@table @method

@item edit_open_info_new(file, encoding=nil)

@item dup()

@end table

@node medit.EditReloadInfo (Lua)
@subsection class medit.EditReloadInfo
@helpsection{SCRIPT_LUA_MOO_EDIT_RELOAD_INFO}

@table @method

@item edit_reload_info_new(encoding=nil)

@item dup()

@end table

@node medit.EditSaveInfo (Lua)
@subsection class medit.EditSaveInfo
@helpsection{SCRIPT_LUA_MOO_EDIT_SAVE_INFO}

@table @method

@item edit_save_info_new(file, encoding=nil)

@item dup()

@end table

@node medit.EditWindow (Lua)
@subsection class medit.EditWindow
@helpsection{SCRIPT_LUA_MOO_EDIT_WINDOW}

@table @method

@item abort_jobs()

@item add_pane(user_id, widget, label, position)

@item add_stop_client(client)

@item close_all()

@item get_active_doc()

@item get_active_view()

@item get_docs()

@item get_editor()

@item get_nth_doc(n)

@item get_nth_view(n)

@item get_pane(user_id)

@item get_views()

@item num_docs()

@item remove_pane(user_id)

@item remove_stop_client(client)

@item set_active_doc(edit)

@item set_active_view(view)

@end table

@node medit.Editor (Lua)
@subsection class medit.Editor
@helpsection{SCRIPT_LUA_MOO_EDITOR}

@table @method

@item close_doc(doc, ask_confirm=true)

@item close_docs(docs, ask_confirm=true)

@item close_window(window, ask_confirm=true)

@item get_active_doc()

@item get_active_view()

@item get_active_window()

@item get_doc(file)

@item get_doc_for_path(path)

@item get_doc_for_uri(uri)

@item get_doc_ui_xml()

@item get_docs()

@item get_ui_xml()

@item get_windows()

@item new_doc(window=nil)

@item new_file(info, parent=nil)

@item new_window()

@item open_file(info, parent=nil)

@item open_files(files, parent=nil)

@item open_path(path, encoding=nil, line=-1, window=nil)

@item open_uri(uri, encoding=nil, line=-1, window=nil)

@item reload(doc, info)

@item save(doc)

@item save_as(doc, info)

@item save_copy(doc, info)

@item set_active_doc(doc)

@item set_active_view(view)

@item set_active_window(window)

@item set_ui_xml(xml)

@end table

@node medit.Pane (Lua)
@subsection class medit.Pane
@helpsection{SCRIPT_LUA_MOO_PANE}

@table @method

@item attach()

@item detach()

@item get_child()

@item get_detachable()

@item get_id()

@item get_index()

@item get_label()

@item get_params()

@item get_removable()

@item open()

@item present()

@item set_detachable(detachable)

@item set_drag_dest()

@item set_frame_markup(markup)

@item set_frame_text(text)

@item set_label(label)

@item set_params(params)

@item set_removable(removable)

@item unset_drag_dest()

@end table

@node medit.TextView (Lua)
@subsection class medit.TextView
@helpsection{SCRIPT_LUA_MOO_TEXT_VIEW}

@table @method

@item set_font_from_string(font)

@item set_lang_by_id(id)

@end table

@node medit.UiXml (Lua)
@subsection class medit.UiXml
@helpsection{SCRIPT_LUA_MOO_UI_XML}

@table @method

@item add_item(merge_id, parent_path, name, action, position)

@item add_ui_from_string(buffer, length=-1)

@item create_widget(type, path, actions, accel_group)

@item find_placeholder(name)

@item get_node(path)

@item get_widget(toplevel, path)

@item insert(merge_id, parent, position, markup)

@item insert_after(merge_id, parent, after, markup)

@item insert_before(merge_id, parent, before, markup)

@item insert_markup(merge_id, parent_path, position, markup)

@item insert_markup_after(merge_id, parent_path, after, markup)

@item insert_markup_before(merge_id, parent_path, before, markup)

@item new_merge_id()

@item remove_node(node)

@item remove_ui(merge_id)

@end table

@node medit.CommandData (Lua)
@subsection class medit.CommandData
@helpsection{SCRIPT_LUA_MOO_COMMAND_DATA}

@table @method

@item set(index_, value)

@item get(index_)

@item set_code(code)

@item get_code()

@end table

@node medit.PaneLabel (Lua)
@subsection class medit.PaneLabel
@helpsection{SCRIPT_LUA_MOO_PANE_LABEL}

@table @method

@item pane_label_new(icon_name=nil, icon_pixbuf=nil, label_text=nil, window_title=nil)

@end table

@node medit.PaneParams (Lua)
@subsection class medit.PaneParams
@helpsection{SCRIPT_LUA_MOO_PANE_PARAMS}

@table @method

@item pane_params_new(window_position, detached, maximized, keep_on_top)

@end table

@node medit.UiNode (Lua)
@subsection class medit.UiNode
@helpsection{SCRIPT_LUA_MOO_UI_NODE}

@table @method

@item get_path()

@item get_child(path)

@end table

@node Functions (Lua)
@subsection Functions
@helpsection{SCRIPT_LUA_FUNCTIONS}
@table @method

@item app_instance()

@item command_factory_register(name, display_name, factory, keys=nil, extension=nil)

@item dgettext(domain, string)

@item edit_open_info_new_path(path, encoding=nil)

@item edit_open_info_new_uri(uri, encoding=nil)

@item edit_save_info_new_path(path, encoding=nil)

@item edit_save_info_new_uri(uri, encoding=nil)

@item edit_window_set_action_filter(action_id, type, filter)

@item editor_instance()

@item gettext(string)

@item parse_command_options(string)

@item prefs_get_bool(key)

@item prefs_get_file(key)

@item prefs_get_filename(key)

@item prefs_get_int(key)

@item prefs_get_string(key)

@item prefs_new_key_bool(key, default_val=false)

@item prefs_new_key_int(key, default_val=0)

@item prefs_new_key_string(key, default_val=nil)

@item prefs_set_bool(key, val)

@item prefs_set_file(key, val)

@item prefs_set_filename(key, val)

@item prefs_set_int(key, val)

@item prefs_set_string(key, val)

@item spin_main_loop(sec)

@end table

