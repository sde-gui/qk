# -*- python -*-

_gtkwindir = os.environ['_GTKWINDIR']
_gtkwinjhbuilddir = os.path.join(_gtkwindir, 'jhbuildrc')
_gtkwinbuildroot = os.environ['_GTKWINBUILDROOT']

_gtkwinconfig = os.environ.get('_GTKWINCONFIG')
if _gtkwinconfig is None:
    raise RuntimeError()
    _gtkwinconfig = 'release'
else:
    _gtkwinconfig = _gtkwinconfig.lower()
assert _gtkwinconfig in ['debug', 'reldbg', 'release']

_mingw_tool_prefix = None
_configure_target = None
for __p in ('i686-w64-mingw32', 'i686-pc-mingw32', 'i586-mingw32msvc', 'i486-mingw32'):
    if os.path.exists('/usr/bin/%s-gcc' % (__p,)):
        _mingw_tool_prefix = '/usr/bin/%s-' % (__p,)
        _configure_target = __p
if not _mingw_tool_prefix:
    raise RuntimeError('Could not find mingw-gcc')

_static_libgcc = ''
if _configure_target in ('i686-w64-mingw32', 'i486-mingw32', 'i686-pc-mingw32'):
    _static_libgcc = '-static-libgcc -static-libstdc++'

makeargs = '-j 4'
moduleset = os.path.join(_gtkwinjhbuilddir, 'gtk.moduleset')
use_lib64 = False

modules = ['medit-gtk-win']

checkoutroot = os.path.join(_gtkwinbuildroot, _gtkwinconfig, 'source')
buildroot = os.path.join(_gtkwinbuildroot, _gtkwinconfig, 'build')
prefix = os.path.join(_gtkwinbuildroot, _gtkwinconfig, 'target')
tarballdir = os.path.join(_gtkwinbuildroot, 'tarballs')

os.environ['prefix'] = prefix

os.environ['JHBUILD_PROMPT'] = r'JHBUILD:\w\$ '

_mingw_tools = {
    'ADDR2LINE': 'addr2line',
    'AS': 'as',
    'CC': 'gcc',
    'CPP': 'cpp',
    'CPPFILT': 'c++filt',
    'CXX': 'g++',
    'DLLTOOL': 'dlltool',
    'DLLWRAP': 'dllwrap',
    'GCOV': 'gcov',
    'LD': 'ld',
    'NM': 'nm',
    'OBJCOPY': 'objcopy',
    'OBJDUMP': 'objdump',
    'READELF': 'readelf',
    'SIZE': 'size',
    'STRINGS': 'strings',
    'WINDRES': 'windres',
    'RC': 'windres',
    'AR': 'ar',
    'RANLIB': 'ranlib',
    'STRIP': 'strip',
}

for _var in _mingw_tools:
    os.environ[_var] = _mingw_tool_prefix + _mingw_tools[_var]

if _gtkwinconfig == 'debug':
    _def_cflags = '-gstabs+'
elif _gtkwinconfig == 'reldbg':
    _def_cflags = '-gstabs+ -O2'
else:
    _def_cflags = '-O2'

_ldflags_cmdline = ''
if _static_libgcc:
    _ldflags_cmdline=' LDFLAGS="-L%s/lib %s"' % (prefix, _static_libgcc,)

# os.environ['CPPFLAGS'] = "-I%s/include" % (prefix,)
# os.environ['CFLAGS'] = "-I%s/include -mms-bitfields -march=i686 %s" % (prefix, _def_cflags)
# os.environ['CXXFLAGS'] = "-I%s/include -mms-bitfields -march=i686 %s" % (prefix, _def_cflags)
# os.environ['OBJCFLAGS'] = "-I%s/include -mms-bitfields -march=i686 %s" % (prefix, _def_cflags)

_cflags = "-mms-bitfields -march=i686 %s %s" % (_def_cflags, _static_libgcc)
_cflags_cmdline = ' CFLAGS="%(_cflags)s" CXXFLAGS="%(_cflags)s" OBJCFLAGS="%(_cflags)s"' % {'_cflags': _cflags}
def _remove_gstabs(module):
    module_autogenargs[module] = module_autogenargs[module].replace('-gstabs+', '-g').replace('-gstabs', '-g')

os.environ['PKG_CONFIG_LIBDIR'] = "%s/lib/pkgconfig" % (prefix,)
os.environ['PKG_CONFIG_PATH'] = "%s/lib/pkgconfig" % (prefix,)

for __dir in os.environ['PATH'].split(':'):
    if os.path.exists(os.path.join(__dir, 'install-check')):
        os.environ['INSTALL'] = os.path.join(__dir, 'install-check')
        break

#Populating autogenargs

if os.environ['mgwlinux'] == 'true':
    _configure_build = 'i686-pc-linux-gnu'
elif os.environ['mgwcygwin'] == 'true':
    _configure_build = 'i686-pc-cygwin'
else:
    raise RuntimeError("oops")

autogenargs  = ' --build=' + _configure_build
autogenargs += ' --host=' + _configure_target
autogenargs += ' --target=' + _configure_target
autogenargs += ' --disable-docs --disable-gtk-doc --disable-scrollkeeper'
autogenargs += ' --enable-maintainer-mode --enable-shared --disable-static'
autogenargs += ' --enable-relocatable --enable-silent-rules --disable-glibtest --disable-pthread'
for _var in ['AR', 'RANLIB', 'STRIP', 'AS', 'DLLTOOL', 'OBJDUMP', 'NM', 'WINDRES', 'RC', 'INSTALL']:
    autogenargs += ' ' + _var + '="' + os.environ[_var] + '" '

autogenargs += _cflags_cmdline + _ldflags_cmdline

# zlib uses custom configure script which doesn't ignore unknown options
module_autogenargs['zlib'] = ""

module_autogenargs['gettext'] = autogenargs + " --without-emacs" \
					    + " --disable-java" \
					    + " --disable-csharp" \
					    + " --with-included-gettext" \
					    + " --without-libexpat-prefix" \
					    + " --without-libxml2-prefix" \
					    + " --without-libglib-2.0-prefix" \
                                            + " --enable-threads=win32"
if _gtkwinconfig == 'debug':
    module_autogenargs['gettext'] += " CPPFLAGS=-DHAVE_INLINE"
_remove_gstabs('gettext')

module_autogenargs['libxml2'] = autogenargs + " --without-python" \
                                            + " --without-threads"
_remove_gstabs('libxml2')

module_autogenargs['pkgconfig'] = autogenargs \
                                            + " --with-installed-glib"

module_autogenargs['glib'] =    autogenargs + " --with-pcre=internal" \
					    + " --with-threads=win32" \
					    + " --disable-fam" \
					    + " --disable-selinux"
# module_autogenargs['glib-2.24.0'] = module_autogenargs['glib']
# module_autogenargs['glib-2.24.2'] = module_autogenargs['glib']

module_autogenargs['cairo'] =   autogenargs + " --without-x" \
					    + " --disable-ft" \
					    + " png_REQUIRES=libpng"
# module_autogenargs['cairo-1.8'] = module_autogenargs['cairo']
# module_autogenargs['cairo-1.10'] = module_autogenargs['cairo']

module_autogenargs['pango'] =   autogenargs + " --with-included-modules"

module_autogenargs['gtk'] = autogenargs \
                                            + " --without-libjpeg" \
                                            + " --without-libtiff" \
					    + " --disable-cups" \
					    + " --without-libjasper" \
					    + " --disable-gdiplus" \
					    + " --with-included-loaders=ani,icns,pcx,ras,tga,png,pnm,wbmp,xbm,xpm,bmp,gif,ico" \
                                            + " --with-included-immodules" \
                                            + " --disable-introspection"

module_autogenargs['gdk-pixbuf'] = autogenargs \
                                            + " --without-libjpeg" \
                                            + " --without-libtiff" \
					    + " --disable-cups" \
					    + " --without-libjasper" \
					    + " --without-gdiplus" \
					    + " --with-included-loaders=ani,icns,pcx,ras,tga,png,pnm,wbmp,xbm,xpm,bmp,gif,ico" \
                                            + " --with-included-immodules" \
                                            + " --disable-introspection"

# module_autogenargs['gtk-2.18'] = autogenargs \
#                                             + " --without-libjpeg" \
#                                             + " --without-libtiff" \
# 					    + " --disable-cups" \
# 					    + " --without-libjasper" \
# 					    + " --with-included-loaders=ani,icns,pcx,ras,tga,png,pnm,wbmp,xbm,xpm,bmp,gif,ico" \
#                                             + " --with-included-immodules" \
#                                             + " --disable-introspection"
# module_autogenargs['gtk-2.20'] = autogenargs \
#                                             + " --without-libjpeg" \
#                                             + " --without-libtiff" \
# 					    + " --disable-cups" \
# 					    + " --without-libjasper" \
# 					    + " --with-included-loaders=ani,icns,pcx,ras,tga,png,pnm,wbmp,xbm,xpm,bmp,gif,ico" \
#                                             + " --with-included-immodules" \
#                                             + " --disable-introspection"
# module_autogenargs['gtk-2-20'] = module_autogenargs['gtk-2.20']

module_autogenargs['pygobject'] = autogenargs \
                                            + " --disable-cairo" \
                                            + " --disable-introspection" \
                                            + " --disable-docs"

module_autogenargs['pygtk'] = autogenargs \
                                            + " --disable-introspection" \
                                            + " --disable-docs" \
                                            + " --disable-numpy"
